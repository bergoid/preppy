#!/bin/bash

# Adapted from:  https://github.com/magicmonty/bash-git-prompt
gitStatusString()
{
    local GITSTATUSCMD="git status --porcelain --untracked-files=all --branch"

    local COLOR_DARK="$(fg256 238)"
    local COLOR_LIGHT="$(fg16 7)"
    local COLOR_END="$(fg0)"

    local SYMBOL_BEGIN="${COLOR_DARK}[${COLOR_END}"
#    local SYMBOL_BEGIN="$(fg256 238)[$(fg0)"
    local SYMBOL_END="${COLOR_DARK}]${COLOR_END}"
    local SYMBOL_SEPARATOR="${COLOR_DARK}|${COLOR_END}"

    local SYMBOL_CLEAN="${COLOR_DARK}✔${COLOR_END}"

    local SYMBOL_STAGED="●"
    local SYMBOL_CONFLICT="!"
    local SYMBOL_REMOVAL="!-"
    local SYMBOL_CHANGED="*"
    local SYMBOL_UNTRACKED="?"
    local SYMBOL_STASHED="$"

    local SYMBOL_AHEAD="↑"
    local SYMBOL_BEHIND="↓"
    local SYMBOL_LOCAL="${COLOR_DARK}L${COLOR_END}"
    local SYMBOL_PREHASH=":"

    local SHOW_UPSTREAM=

    __git_prompt_read ()
    {
        local f="$1"
        shift
        test -r "$f" && read "$@" <"$f"
    }

    # We know already we are in a git repository
    # Check if we are in a { bare repo | .git directory } and act accordingly
    if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "false" ]; then
        echo -e "${SYMBOL_BEGIN}bare${SYMBOL_END}"
        return
    fi

    # We are in a working tree.
    local state=""
    local step=""
    local total=""
    if [ -d "${git_dir}/rebase-merge" ]; then
      __git_prompt_read "${git_dir}/rebase-merge/msgnum" step
      __git_prompt_read "${git_dir}/rebase-merge/end" total
      if [ -f "${git_dir}/rebase-merge/interactive" ]; then
        state="|REBASE-i"
      else
        state="|REBASE-m"
      fi
    else
      if [ -d "${git_dir}/rebase-apply" ]; then
        __git_prompt_read "${git_dir}/rebase-apply/next" step
        __git_prompt_read "${git_dir}/rebase-apply/last" total
        if [ -f "${git_dir}/rebase-apply/rebasing" ]; then
          state="|REBASE"
        elif [ -f "${git_dir}/rebase-apply/applying" ]; then
          state="|AM"
        else
          state="|AM/REBASE"
        fi
      elif [ -f "${git_dir}/MERGE_HEAD" ]; then
        state="|MERGING"
      elif [ -f "${git_dir}/CHERRY_PICK_HEAD" ]; then
        state="|CHERRY-PICKING"
      elif [ -f "${git_dir}/REVERT_HEAD" ]; then
        state="|REVERTING"
      elif [ -f "${git_dir}/BISECT_LOG" ]; then
        state="|BISECTING"
      fi
    fi

    if [ -n "$step" ] && [ -n "$total" ]; then
      state="${state} ${step}/${total}"
    fi

    local num_staged=0
    local num_changed=0
    local num_conflicts=0
    local num_untracked=0
    while IFS='' read -r line || [[ -n "$line" ]]; do
      status=${line:0:2}
      while [[ -n $status ]]; do
        case "$status" in
          #two fixed character matches, loop finished
          \#\#) branch_line="${line/\.\.\./^}"; break ;;
          \?\?) ((num_untracked++)); break ;;
          U?) ((num_conflicts++)); break;;
          ?U) ((num_conflicts++)); break;;
          DD) ((num_conflicts++)); break;;
          AA) ((num_conflicts++)); break;;
          #two character matches, first loop
          ?M) ((num_changed++)) ;;
          ?D) ((num_changed++)) ;;
          ?\ ) ;;
          #single character matches, second loop
          U) ((num_conflicts++)) ;;
          \ ) ;;
          *) ((num_staged++)) ;;
        esac
        status=${status:0:(${#status}-1)}
      done
  done <<< "$($GITSTATUSCMD)"

    local num_stashed=0
    if [[ "$__GIT_PROMPT_IGNORE_STASH" != "1" ]]; then
      local stash_file="$(git rev-parse --git-dir)/logs/refs/stash"
      if [[ -e "${stash_file}" ]]; then
        while IFS='' read -r wcline || [[ -n "$wcline" ]]; do
          ((num_stashed++))
        done < ${stash_file}
      fi
    fi

    local clean=0
    if (( num_changed == 0 && num_staged == 0 && num_untracked == 0 && num_stashed == 0 && num_conflicts == 0)) ; then
      clean=1
    fi

    IFS="^" read -ra branch_fields <<< "${branch_line/\#\# }"
    local branch="${branch_fields[0]}"
    local isLocal=false
    local upstream=
    local num_ahead=0
    local num_behind=0

    if [[ "$branch" == *"Initial commit on"* ]]; then
      IFS=" " read -ra fields <<< "$branch"
      branch="${fields[3]}"
      isLocal=true
    elif [[ "$branch" == *"No commits yet on"* ]]; then
      IFS=" " read -ra fields <<< "$branch"
      branch="${fields[4]}"
      isLocal=true
    elif [[ "$branch" == *"no branch"* ]]; then
      tag=$(git describe --tags --exact-match 2>/dev/null)
      if [[ -n "$tag" ]]; then
        branch="$tag"
      else
        branch="${SYMBOL_PREHASH}$(git rev-parse --short HEAD 2>/dev/null)"
      fi
    else
      if [[ "${#branch_fields[@]}" -eq 1 ]]; then
        isLocal=true
      else
        IFS="[,]" read -ra remote_fields <<< "${branch_fields[1]}"
        upstream="${remote_fields[0]}"
        for remote_field in "${remote_fields[@]}"; do
          if [[ "$remote_field" == "ahead "* ]]; then
            num_ahead=${remote_field:6}
          fi
          if [[ "$remote_field" == "behind "* ]] || [[ "$remote_field" == " behind "* ]]; then
            num_behind=${remote_field:7}
          fi
        done
      fi
    fi

    if [[ -z "$upstream" ]] ; then
      upstream='^'
    fi

    local GITSTATUSLINE="${SYMBOL_BEGIN}${branch}${state}"

    [ -n "$SHOW_UPSTREAM" ] && GITSTATUSLINE="${GITSTATUSLINE} ${upstream} "

    $isLocal && GITSTATUSLINE="${GITSTATUSLINE}${SYMBOL_LOCAL}"

    [ $num_behind -gt 0 ] && GITSTATUSLINE="${GITSTATUSLINE} ${COLOR_LIGHT}${SYMBOL_BEHIND}${num_behind}${COLOR_END}"

    [ $num_ahead -gt 0 ] && GITSTATUSLINE="${GITSTATUSLINE} ${COLOR_LIGHT}${SYMBOL_AHEAD}${num_ahead}${COLOR_END}"

    GITSTATUSLINE="${GITSTATUSLINE}${branchTracking}${SYMBOL_SEPARATOR}"

    [ $num_staged -gt 0 ] && GITSTATUSLINE="${GITSTATUSLINE} ${SYMBOL_STAGED}${COLOR_LIGHT}${num_staged}${COLOR_END}"

    [ $num_conflicts -gt 0 ] && GITSTATUSLINE="${GITSTATUSLINE} ${SYMBOL_CONFLICT}${COLOR_LIGHT}${num_conflicts}${COLOR_END}"

    [ $num_changed -gt 0 ] && GITSTATUSLINE="${GITSTATUSLINE} ${SYMBOL_CHANGED}${COLOR_LIGHT}${num_changed}${COLOR_END}"

    [ $num_untracked -gt 0 ] && GITSTATUSLINE="${GITSTATUSLINE} ${SYMBOL_UNTRACKED}${COLOR_LIGHT}${num_untracked}${COLOR_END}"

    [ $num_stashed -gt 0 ] && GITSTATUSLINE="${GITSTATUSLINE} ${SYMBOL_STASHED}${COLOR_LIGHT}${num_stashed}${COLOR_END}"

    [ $clean -eq 1 ] && GITSTATUSLINE="${GITSTATUSLINE}${SYMBOL_CLEAN}" || GITSTATUSLINE="${GITSTATUSLINE} "

    GITSTATUSLINE="${GITSTATUSLINE}${SYMBOL_END}"

    echo -ne "${GITSTATUSLINE} "
}

gitStatusString
